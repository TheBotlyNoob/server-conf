# general settings
PUID=1000
PGID=1000

DOMAINNAME=example.com

TZ=America/New_York

# absolute path to the directory containing the private application configs/data
APP_ROOT=

# sub-domains to proxy via traefik and frp
# comma separated list in the form of subdomain:docker_socket_port
# for example: "media:9090,nas:9095", etc.
#
# the docker socket port is used for showing up on the main homepage NOT traefik
#
# those hosts need to be connected at that port to the `frps-internal` network
# i.e. $DOMAINNAME:7000 connected with frpc
PROXY_SUBDOMAINS=media:9090

# allocate 100GiB for Pingvin storage
# this gets PREALLOCATED, so make sure you have enough space
# on the disk
PINGVIN_STORAGE_SIZE_MEGABITS=100000

CROWDSEC_BOUNCER_LAPI_KEY=

### authentik ###
AUTHENTIK_ERROR_REPORTING__ENABLED=true

AUTHENTIK_LDAP_OUTPOST_TOKEN=

# https://containrrr.dev/shoutrrr/v0.8/
# for notifications for watchtower
WATCHTOWER_NOTIFICATION_URL=

# slug for uptime kuma widget on dashboard
UPTIME_KUMA_SLUG=

# Cloudflare API key for DNS challenge
CF_API_EMAIL=
CF_DNS_API_TOKEN=

# headscale OIDC settings
HEADSCALE_OIDC_CLIENT_ID=
HEADSCALE_OIDC_CLIENT_SECRET=
HEADSCALE_OIDC_ISSUER=https://authentik.domain.tld/application/o/appname/
# generated headscale api key
HEADSCALE_API_KEY=

# generate a preauth key for the tailscale exit node with:
TAILSCALE_EXIT_NODE_PREAUTH_KEY=
HEADPLANE_AGENT_PREAUTH_KEY=

# headplane OIDC settings
# this should be separate because headplane
# can control headscale, and should be handled by different users
HEADPLANE_OIDC_CLIENT_ID=
HEADPLANE_OIDC_CLIENT_SECRET=
HEADPLANE_OIDC_ISSUER=https://authentik.domain.tld/application/o/appname/

FRP_OIDC_ISSUER=https://authentik.domain.tld/application/o/appname/
# AKA CLIENT_ID
FRP_OIDC_AUDIENCE=

MATRIX_OIDC_ISSUER_URL=https://authentik.domain.tld/application/o/appname/
MATRIX_OIDC_CLIENT_ID=
MATRIX_OIDC_CLIENT_SECRET=

# add secret envs by running:
# ```
# echo "AUTHENTIK_PG_PASS=$(openssl rand -base64 36 | tr -d '\n')" >> .env
# echo "AUTHENTIK_SECRET_KEY=$(openssl rand -base64 60 | tr -d '\n')" >> .env
#
# echo "HEADPLANE_COOKIE_SECRET=$(openssl rand -base64 60 | tr -d '\n')" >> .env
#
# echo "MATRIX_PG_PASS=$(openssl rand -base64 36 | tr -d '\n')" >> .env
# echo "MATRIX_REGISTRATION_SHARED_SECRET=$(openssl rand -base64 60 | tr -d '\n')" >> .env
# echo "MATRIX_MACAROON_SECRET_KEY=$(openssl rand -base64 60 | tr -d '\n')" >> .env
# echo "MATRIX_FORM_SECRET=$(openssl rand -base64 60 | tr -d '\n')" >> .env
#
# echo "MAS_PG_PASS=$(openssl rand -base64 36 | tr -d '\n')" >> .env
# echo "MAS_ENCRYPTION_KEY=$(openssl rand -hex 32 | tr -d '\n')" >> .env
#
# echo "MAS_KEY_1_KID=$(openssl rand -base64 9 | tr -d '\n')" >> .env
# echo "MAS_KEY_1_RSA_KEY=$(openssl genrsa --traditional 2048 | openssl base64 | tr -d '\n')" >> .env
#
# echo "MAS_KEY_2_KID=$(openssl rand -base64 9 | tr -d '\n')" >> .env
# echo "MAS_KEY_2_EC_KEY=$(openssl ecparam -name prime256v1 -genkey -noout | openssl base64 | tr -d '\n')" >> .env
#
# echo "MAS_KEY_3_KID=$(openssl rand -base64 9 | tr -d '\n')" >> .env
# echo "MAS_KEY_3_EC_KEY=$(openssl ecparam -name prime256v1 -genkey -noout | openssl base64 | tr -d '\n')" >> .env
#
# echo "MAS_CLIENT_BASIC_SECRET=$(openssl rand -base64 60 | tr -d '\n')" >> .env
# echo "MAS_ADMIN_BASIC_SECRET=$(openssl rand -base64 60 | tr -d '\n')" >> .env
#
# # needs hex here because openssl can't output URL-safe base64
# echo "MATRIX_BRIDGE_PG_PASS=$(openssl rand -hex 36 | tr -d '\n')" >> .env
#
# echo "DISCORD_BRIDGE_AS_TOKEN=$(openssl rand -base64 60 | tr -d '\n')" >> .env
# echo "DISCORD_BRIDGE_HS_TOKEN=$(openssl rand -base64 60 | tr -d '\n')" >> .env
# echo "DISCORD_BRIDGE_SENDER_LOCALPART=$(openssl rand -hex 10 | tr -d '\n')" >> .env
# ```

###############################################################
# Project Name
#
# https://docs.docker.com/compose/compose-file/05-services/#security_opt
# https://docs.docker.com/compose/environment-variables/set-environment-variables/
#
###############################################################
name: traefik
services:
    # ------------------------------
    # -- Traefik 3
    # -- Updated 2024-June-04
    # ------------------------------
    traefik:
        image: traefik:3.2.2
        container_name: traefik
        restart: unless-stopped
        user: ${PUID}:${PGID}
        security_opt:
            - no-new-privileges=true
        depends_on:
            - socket-proxy # Comment out if not using socket-proxy
        networks:
            # This is ONLY defined this way so that Homepage can reach this container via DNS name due to StrictSNI.
            # Meaning this container INTERNAL TO DOCKER is only traefik, by adding the alias it is now
            # traefik AND traefik.domain.tld WITHOUT reaching to a DNS server
            # Allows containers to reach each other internally without asking out
            traefik:
                aliases:
                    - traefik.${DOMAINNAME}
                #ipv4_address: 10.255.224.2
            socket_proxy:
                #ipv4_address: 172.16.224.2
        ports:
            - name: web
              host_ip: 0.0.0.0 # All interfaces, not a specific one
              target: 80 # Container Port
              published: "80" # STRING
              protocol: tcp # tcp or udp
              app_protocol: http # OPTIONAL. Layer 7 Protocol used.  "Richer behavior"
              mode: host # or Ingress for load balancing
        extra_hosts:
            - "host.docker.internal:host-gateway"
        environment:
            TZ: ${TZ}
            DOMAINNAME: ${DOMAINNAME}

            # Global configuration
            TRAEFIK_GLOBAL_CHECKNEWVERSION: false
            TRAEFIK_GLOBAL_SENDANONYMOUSUSAGE: true

            # Entrypoints
            TRAEFIK_ENTRYPOINTS_WEB_ADDRESS: ":80"

            # Logs
            TRAEFIK_LOG_LEVEL: DEBUG
            TRAEFIK_LOG_NOCOLOR: false
            TRAEFIK_LOG_MAXSIZE: 100
            TRAEFIK_LOG_COMPRESS: true

            # Access logs
            TRAEFIK_ACCESSLOG_ADDINTERNALS: true
            TRAEFIK_ACCESSLOG_FILEPATH: /logs/traefik-access.log
            TRAEFIK_ACCESSLOG_BUFFERINGSIZE: 100
            TRAEFIK_ACCESSLOG_FIELDS_NAMES_STARTUTC: drop
            TRAEFIK_ACCESSLOG_FILTERS_STATUSCODES: "204-299,400-499,500-599"

            # API and Dashboard
            TRAEFIK_API_DASHBOARD: true

            # Providers
            TRAEFIK_PROVIDERS_DOCKER_ENDPOINT: "tcp://socket-proxy:2375"
            TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT: false
            TRAEFIK_PROVIDERS_DOCKER_NETWORK: traefik

            TRAEFIK_PROVIDERS_FILE_DIRECTORY: /rules
            TRAEFIK_PROVIDERS_FILE_WATCH: true

            # Let's Encrypt (ACME)
            TRAEFIK_CERTIFICATESRESOLVERS_LE_ACME_STORAGE: "/data/acme.json"
            TRAEFIK_CERTIFICATESRESOLVERS_LE_ACME_DNSCHALLENGE_PROVIDER: cloudflare
            TRAEFIK_CERTIFICATESRESOLVERS_LE_ACME_DNSCHALLENGE_RESOLVERS: "1.1.1.1:53,8.8.8.8:53"
        volumes:
            - "./config:/config" # traefik.yaml
            - "./rules:/rules" # Dynamic File Provider directory
            - "${APP_ROOT}/traefik/logs:/logs"
            - "${APP_ROOT}/traefik/data:/data" # acme.json defined in traefik.yaml
            ## When using Docker Socket Proxy, comment out the below direct socket access
            ## Ensure traefik.yaml matches chosen method
            # - "/var/run/docker.sock:/var/run/docker.sock:ro"
        labels:
            traefik.enable: true
            ## HTTP Routers
            traefik.http.routers.traefik-rtr.rule: Host(`traefik.${DOMAINNAME}`)
            traefik.http.routers.traefik-rtr.middlewares: middlewares-authentik@file
            #### Migrate individual service cert resolver to global resolution in traefik.yaml
            #- "traefik.http.routers.traefik-rtr.tls=true"
            #- "traefik.http.routers.traefik-rtr.tls.certresolver=le"
            #- "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
            #- "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
            ## Services - API
            traefik.http.routers.traefik-rtr.service: api@internal
# IMPORTANT! this doesn't contain TLS settings. Extend this with your own.

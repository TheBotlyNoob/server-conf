# ------------------------------
# -- authentik (Identity Provider / SSO)
# -- Updated/Created 2024-July-02
# Authentik configuration: https://docs.goauthentik.io/docs/installation/configuration
# ------------------------------
name: authentik # Project Name

networks:
    authentik-backend:
        name: authentik-backend

services:
    authentik_postgresql:
        image: docker.io/library/postgres:16-alpine
        container_name: authentik_postgresql
        shm_size: 128mb # https://hub.docker.com/_/postgres
        restart: unless-stopped
        user: ${PUID}:${PGID}
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
                ]
            start_period: 20s
            interval: 30s
            retries: 5
            timeout: 5s
        networks:
            - authentik-backend
        volumes:
            - "${APP_ROOT}/authentik/postgres:/var/lib/postgresql/data"

        environment:
            POSTGRES_PASSWORD: ${PG_PASS:?database password required}
            POSTGRES_USER: ${PG_USER:-authentik}
            POSTGRES_DB: ${PG_DB:-authentik}

    authentik_redis:
        image: docker.io/library/redis:alpine
        container_name: authentik_redis
        user: ${PUID}:${PGID}
        command: --save 60 1 --loglevel warning
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
            start_period: 20s
            interval: 30s
            retries: 5
            timeout: 3s
        networks:
            - authentik-backend
        volumes:
            - "${APP_ROOT}/authentik/redis:/data"

    # Use the embedded outpost (2021.8.1+) instead of the seperate Forward Auth / Proxy Provider container
    authentik_server:
        image: ghcr.io/goauthentik/server:latest
        container_name: authentik_server
        restart: unless-stopped
        command: server
        user: ${PUID}:${PGID}
        depends_on:
            - authentik_postgresql
            - authentik_redis
        networks:
            - traefik
            - socket_proxy
            - authentik-backend

        environment:
            AUTHENTIK_REDIS__HOST: authentik_redis
            AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
            AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
            AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
            AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS:?database password required}

            AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
        env_file: ../.env
        volumes:
            - "${APP_ROOT}/authentik/media:/media"
            - "${APP_ROOT}/authentik/static:/web/dist/custom" # static files hosted at https://authentik.domain.tld/static/dist/custom/
            - "./config/custom.css:/web/dist/custom.css"
            - "${APP_ROOT}/authentik/static/background.png:/web/dist/assets/images/flow_background.jpg" # set the background image for flows
            - "${APP_ROOT}/authentik/custom-templates:/templates"
        labels:
            traefik.enable: true
            ## HTTP Routers
            traefik.http.routers.authentik-rtr.rule: Host(`authentik.${DOMAINNAME}`)
            ## Individual Application forwardAuth regex (catch any subdomain using individual application forwardAuth)
            traefik.http.routers.authentik-output-rtr.rule: HostRegexp(`{subdomain:[a-z0-9-]+}.${DOMAINNAME}`) && PathPrefix(`/outpost.goauthentik.io/`)
            ## HTTP Services
            traefik.http.routers.authentik-rtr.service: authentik-svc
            traefik.http.services.authentik-svc.loadBalancer.server.port: 9000

            homepage.group: internal
            homepage.name: Authentik
            homepage.href: https://authentik.${DOMAINNAME}
            homepage.icon: sh-authentik.svg

    authentik_worker:
        image: ghcr.io/goauthentik/server:latest
        container_name: authentik_worker
        restart: unless-stopped
        # Removing `user: root` also prevents the worker from fixing the permissions
        # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
        # (1000:1000 by default)
        # user: root
        user: ${PUID}:${PGID}
        command: worker
        depends_on:
            - authentik_postgresql
            - authentik_redis
        networks:
            - socket_proxy
            - authentik-backend
        environment:
            AUTHENTIK_REDIS__HOST: authentik_redis
            AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
            AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
            AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
            AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS:?database password required}

            AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
        env_file: ../.env
        volumes:
            - "${APP_ROOT}/authentik/media:/media"
            - "${APP_ROOT}/authentik/custom-templates:/templates"
            # - /var/run/docker.sock:/var/run/docker.sock # Uncomment if NOT using socket-proxy
            #- "./traefik/cert_export:/certs:ro" # If NOT using reverse proxy, manually map in certificates

    authentik_ldap:
        image: ghcr.io/goauthentik/ldap
        # Optionally specify which networks the container should be
        # might be needed to reach the core authentik server
        networks:
            - traefik
            - authentik-backend
        environment:
            AUTHENTIK_HOST: https://authentik.${DOMAINNAME}
            AUTHENTIK_INSECURE: "false"
            AUTHENTIK_TOKEN: ${AUTHENTIK_LDAP_OUTPOST_TOKEN:?outpost token required}
        ports:
            - 636:6636
